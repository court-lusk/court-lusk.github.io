require(["esri/WebMap", "esri/views/MapView", "esri/widgets/Locate", "esri/widgets/Legend", "esri/widgets/Home", "esri/widgets/Search", "esri/layers/GraphicsLayer", "esri/widgets/Sketch/SketchViewModel", "esri/core/promiseUtils"], (WebMap, MapView, Locate, Legend, Home, Search, GraphicsLayer, SketchViewModel, promiseUtils) => { const webmap = new WebMap({ portalItem: { id: "9cdabf7180ff432396fb60a2ad6928cc" } }); const view = new MapView({ container: "viewDiv", map: webmap }); window.view = view; let legend = new Legend({ view: view }); view.ui.add(legend, "bottom-right"); const sketchLayer = new GraphicsLayer(); const bufferLayer = new GraphicsLayer(); view.map.addMany([bufferLayer, sketchLayer]); let mapLayer = null; let mapLayerView = null; webmap.load().then(() => { mapLayer = webmap.layers.find((layer) => { return layer.title === "COVID-19 Predicated Risk" }); mapLayer.outFields = ["ZIP_CODE", "Predicted_risk"]; view.whenLayerView(mapLayer).then((layerView) => { mapLayerView = layerView; queryDiv.style.display = "block" }) }); view.ui.add([queryDiv], "bottom-left"); view.ui.add([resultDiv], "top-right"); const lineSymbol = { type: "simple-line", color: "#000000", outline: { color: "#000000", width: 3 } }; const rectangleSymbol = { type: "rectangle", color: "#000000", style: "none", outline: { color: "#000000", width: 1 } }; const polygonSymbol = { type: "simple-fill", color: "#000000", style: "none", outline: { color: "#000000", width: 1 } }; const sketchViewModel = new SketchViewModel({ view: view, layer: sketchLayer, polylineSymbol: lineSymbol, polygonSymbol: rectangleSymbol, polygonSymbol: polygonSymbol }); sketchViewModel.on("create", (event) => { if (event.state === "complete") { sketchGeometry = event.graphic.geometry; runQuery() } }); sketchViewModel.on("update", (event) => { if (event.state === "complete") { sketchGeometry = event.graphics[0].geometry; runQuery() } }); const lineBtn = document.getElementById("line-geometry-button"); const rectangleBtn = document.getElementById("select-by-rectangle"); const polygonBtn = document.getElementById("polygon-geometry-button"); lineBtn.addEventListener("click", geometryButtonsClickHandler); rectangleBtn.addEventListener("click", geometryButtonsClickHandler); polygonBtn.addEventListener("click", geometryButtonsClickHandler); function geometryButtonsClickHandler(event) { const geometryType = event.target.value; clearGeometry(); sketchViewModel.create(geometryType) } const clearGeometryBtn = document.getElementById("clearGeometry"); clearGeometryBtn.addEventListener("click", clearGeometry); function clearGeometry() { sketchGeometry = null; sketchViewModel.cancel(); sketchLayer.removeAll(); clearHighlighting(); clearCharts(); resultDiv.style.display = "none" } const debouncedRunQuery = promiseUtils.debounce(() => { if (!sketchGeometry) { return } resultDiv.style.display = "block"; return promiseUtils.eachAlways([queryStatistics(), updateMapLayer()]) }); function runQuery() { debouncedRunQuery().catch((error) => { if (error.name === "AbortError") { return } console.error(error) }) } let highlightHandle = null; function clearHighlighting() { if (highlightHandle) { highlightHandle.remove(); highlightHandle = null } } function highlightZipCodes(objectIds) { clearHighlighting(); const objectIdField = mapLayer.objectIdField; document.getElementById("count").innerHTML = objectIds.length; highlightHandle = mapLayerView.highlight(objectIds) } function updateMapLayer() { const query = mapLayerView.createQuery(); query.geometry = sketchGeometry; return mapLayerView.queryObjectIds(query).then(highlightZipCodes) } let riskChart = null; function queryStatistics() { const statDefinitions = [{ onStatisticField: "Predicted_risk", outStatisticFieldName: "avg_risk", statisticType: "avg" },]; const query = mapLayerView.createQuery(); query.geometry = sketchGeometry; query.outStatistics = statDefinitions; return mapLayerView.queryFeatures(query).then((result) => { const allStats = result.features[0].attributes; updateChart(riskChart, [allStats.avg_risk]) }, console.error) } function updateChart(chart, dataValues) { chart.data.datasets[0].data = dataValues; chart.update() } function createRiskChart() { const riskCanvas = document.getElementById("risk-chart"); riskChart = new Chart(riskCanvas.getContext("2d"), { type: "horizontalBar", data: { labels: ["Predicted Risk",], datasets: [{ label: "Predicted Risk", backgroundColor: "#149dcf", stack: "Stack 0", data: [0] }] }, options: { responsive: false, legend: { display: false }, title: { display: true, text: "Average Predicted Risk" }, scales: { xAxes: [{ stacked: true, ticks: { beginAtZero: true, precision: 0 } }], yAxes: [{ stacked: true }] } } }) } function clearCharts() { updateChart(riskChart, [0]); document.getElementById("count").innerHTML = 0 } createRiskChart(); const searchWidget = new Search({ view: view }); view.ui.add(searchWidget, {position: "top-left", index: 0}); const homeWidget = new Home({ view: view }); view.ui.add(homeWidget, "top-left"); const locateBtn = new Locate({ view: view }); view.ui.add(locateBtn, { position: "top-left" }) });
